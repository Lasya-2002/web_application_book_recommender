import streamlit as st
import requests
from streamlit import session_state as state

# Custom header with authentication
def custom_header():
    st.set_page_config(page_title="📚 Book Recommendation System", layout="wide")
    st.markdown("""
    <style>
        .title {
            font-size: 2.5em !important;
            color: #2E86C1 !important;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }
        .subtitle {
            font-size: 1.2em !important;
            color: #5D6D7E !important;
            margin-bottom: 20px !important;
        }
        .top-section {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
    </style>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns([4, 1])
    with col1:
        st.markdown('<h1 class="title">📚 Next Chapter</h1>', unsafe_allow_html=True)
        st.markdown('<h3 class="subtitle">Your Personalized AI for your next read</h3>', unsafe_allow_html=True)
    with col2:
        if state.get("logged_in"):
            st.markdown(f"### Welcome, {state.username}! 👋")
            if st.button("🚪 Logout"):
                state.logged_in = False
                state.session_id = None
                state.username = "Guest"
                state.show_login = False
                state.show_signup = False
                st.rerun()
        else:
            login_col, signup_col = st.columns(2)
            with login_col:
                if st.button("Login", key="login_btn"):
                    state.show_login = True
                    state.show_signup = False
            with signup_col:
                if st.button("Sign Up", key="signup_btn"):
                    state.show_signup = True
                    state.show_login = False

# Authentication forms
def login_form():
    with st.form("Login"):
        st.write("### User Login")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        submit = st.form_submit_button("Login")
        
        if submit:
            response = requests.post(
                'http://localhost:5000/login',
                json={'username': username, 'password': password}
            )
            if response.status_code == 200:
                state.logged_in = True
                state.session_id = response.json()['session_id']
                state.username = username
                state.show_login = False
                st.rerun()
            else:
                st.error("Invalid credentials")

def signup_form():
    with st.form("Sign Up"):
        st.write("### Create New Account")
        username = st.text_input("Username")
        password = st.text_input("Password", type="password")
        st.markdown(
            "#### Disclaimer 📢\n"
            "This application is made as part of an academic project. "
            "By creating an account, you agree that the recommendations provided by NextChapter are generated by an AI model. "
            "The accuracy and relevance of recommendations may vary, and users should verify information before making decisions. "
            "We do not take responsibility for book content, availability, or accuracy of ratings."
        )
        disclaimer_accepted = st.checkbox("I have read and agree to the disclaimer.")
        col1, col2 = st.columns([1, 1])
        with col1:
            submit = st.form_submit_button("Create Account")
        with col2:
            login_now = st.form_submit_button("Login Now")
        
        if submit:
            if not disclaimer_accepted:
                st.error("You must accept the disclaimer to create an account.")
            else:
                response = requests.post(
                    'http://localhost:5000/signup',
                    json={'username': username, 'password': password}
                )
                if response.status_code == 201:
                    st.success("Account created! Please login.")
                    state.show_signup = False
                    state.show_login = True
                    st.rerun()
        
        if login_now:
            state.show_signup = False
            state.show_login = True
            st.rerun()

# Main content with recommendations
def main_content():
    if not state.get('session_id'):
        state.logged_in = False
        return

    verify_response = requests.post(
        'http://localhost:5000/verify',
        headers={'Session-ID': state.session_id}
    )
    
    if verify_response.status_code != 200:
        state.logged_in = False
        return
    
    state.username = verify_response.json().get('username', 'User')
    
    user_input = st.text_area("💬 Please enter your prompt: ", placeholder="e.g., I love mystery fantasy books ....", height=150)
    
    if st.button("Get Book Recommendations") and user_input:
        try:
            response = requests.post("http://127.0.0.1:5000/recommend", json={"input": user_input}, headers={"Session-ID": state.session_id})
            
            if response.status_code == 200:
                try:
                    response_data = response.json()
                    if response_data.get("recommendations"):
                        recs = response_data["recommendations"]
                        st.success("✅ Book Recommendations Found!")
                        st.subheader("📚 Recommended Book:")
                        st.write(f"**{recs.get('book_itself', 'N/A')}**")
                        st.subheader("📌 Details:")
                        st.write(f"📖 **Category:** {recs.get('categories', 'Unknown')}")
                        st.write(f"⭐ **Average Rating:** {recs.get('average_rating', 'N/A')}")
                        st.write(f"🗳️ **Ratings Count:** {recs.get('ratings_count', 'N/A')}")
                        st.write(f"🌍 **Language:** {recs.get('language', 'Unknown')}")
                        st.subheader("🔗 Similar Books:")
                        st.write("📌 **By Title:**", ", ".join(recs.get("similar_title_books", ["No recommendations available"])))
                        st.write("📌 **By Description:**", ", ".join(recs.get("similar_description_books", ["No recommendations available"])))
                        st.write("📌 **By Category:**", ", ".join(recs.get("similar_category_books_faiss", ["No recommendations available"])))
                    else:
                        st.error(f"❌ {response_data.get('message', 'Failed to get recommendations.')}")
                except Exception as e:
                    st.error(f"🚨 Error parsing the API response: {e}")
            else:
                st.error(f"❌ API Request failed with status code {response.status_code}")
        except requests.exceptions.RequestException as e:
            st.error(f"🚨 API Error: {e}")
    else:
        st.info("Please enter a book preference or query and click 'Get Book Recommendations'.")

# Main app flow
def main():
    state.setdefault('logged_in', False)
    state.setdefault('show_login', False)
    state.setdefault('show_signup', False)
    state.setdefault('username', 'Guest')
    
    custom_header()
    
    if not state.logged_in:
        if state.show_login:
            login_form()
        elif state.show_signup:
            signup_form()
        else:
            st.info("🔐 Please login or sign up to access book recommendations")
        return
    
    main_content()

if __name__ == "__main__":
    main()